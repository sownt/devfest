services:
  postgres:
    profiles:
      - dev
      - prod
    image: postgres
    container_name: devfest_db
    restart: always
    env_file: .env
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_USER}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - ${EXPOSE_DATABASE}:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
  
  api:
    profiles:
      - dev
      - prod
    build:
      context: .
      target: api
    container_name: api
    restart: always
    env_file: .env
    volumes:
      - ${AWS_CREDENTIAL}:/root/.aws
      - ./api/templates:/app/templates
      - .env:/app/.env
    ports:
      - ${EXPOSE_API}:8080
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SERVICE_PORT=8080
      - GO_ENV=production

  app-dev:
    profiles:
      - dev
    container_name: app
    build:
      context: .
      target: app-dev
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - ${EXPOSE_APP}:3000
    environment:
      NODE_ENV: development
    command: npm run dev

  app-prod:
    profiles:
      - prod
    container_name: app
    build:
      context: .
      target: app-prod
    ports:
      - ${EXPOSE_APP}:3000
    environment:
      NODE_ENV: production
    command: npm start

volumes:
  pg_data: